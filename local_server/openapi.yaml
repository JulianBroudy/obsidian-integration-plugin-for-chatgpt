openapi: 3.0.2
info:
  title: Obsidian PKM Integration
  description: An Obsidian Vault search and manipulation API for querying and filtering notes based on natural language queries and metadata
  version: 1.0.0
servers:
  - url: http://localhost:3333
paths:
  "/upsert":
    post:
      summary: Upsert
      description: Save chat information. Accepts an array of documents with text (potential questions + conversation text), metadata (source 'CHAT' and timestamp, no ID as this will be generated). Confirm with the user before saving, ask for more details/context.
      operationId: upsert_upsert_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpsertRequest"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UpsertResponse"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/commands":
    post:
      summary: Create Command
      description: Accepts a command object and creates a new command. It then polls the database for the status of the command until it completes or encounters an error.
      operationId: create_command_commands_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CommandRequest"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CommandResponse"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
  "/query":
    post:
      summary: Query Main
      description: Accepts search query objects array each with query and optional filter. Break down complex questions into sub-questions. Refine results by criteria, e.g. time / source, don't do this often. Split queries if ResponseTooLargeError occurs.
      operationId: query_main_query_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/QueryRequest"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/QueryResponse"
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
components:
  schemas:
    CommandContent:
      title: CommandContent
      required:
        - text
        - metadata
      type: object
      properties:
        text:
          title: Text
          type: string
        metadata:
          "$ref": "#/components/schemas/DocumentMetadata"
    CommandRequest:
      title: CommandRequest
      required:
        - command
      type: object
      properties:
        command:
          "$ref": "#/components/schemas/CommandWithContent"
    CommandResponse:
      title: CommandResponse
      required:
        - id
      type: object
      properties:
        id:
          title: Id
          type: string
        errors:
          title: Errors
          type: string
    CommandStatus:
      title: CommandStatus
      enum:
        - NEW
        - PROCESSING
        - COMPLETED
        - ABANDONED
        - ERROR
      type: string
      description: An enumeration.
    CommandType:
      title: CommandType
      enum:
        - CREATE_NOTE
        - MODIFY_NOTE
        - DELETE_NOTE
      type: string
      description: An enumeration.
    CommandWithContent:
      title: CommandWithContent
      required:
        - type
        - content
      type: object
      properties:
        id:
          title: Id
          type: string
        status:
          allOf:
            - "$ref": "#/components/schemas/CommandStatus"
          default: NEW
        errors:
          title: Errors
          type: string
        created_at:
          title: Created At
          type: string
        updated_at:
          title: Updated At
          type: string
        type:
          "$ref": "#/components/schemas/CommandType"
        content:
          "$ref": "#/components/schemas/CommandContent"
    Document:
      title: Document
      required:
        - text
      type: object
      properties:
        id:
          title: Id
          type: string
        text:
          title: Text
          type: string
        metadata:
          "$ref": "#/components/schemas/DocumentMetadata"
    DocumentChunkMetadata:
      title: DocumentChunkMetadata
      type: object
      properties:
        source:
          "$ref": "#/components/schemas/Source"
        source_id:
          title: Source Id
          type: string
        url:
          title: Url
          type: string
        created_at:
          title: Created At
          type: string
        author:
          title: Author
          type: string
        document_id:
          title: Document Id
          type: string
    DocumentChunkWithScore:
      title: DocumentChunkWithScore
      required:
        - text
        - metadata
        - score
      type: object
      properties:
        id:
          title: Id
          type: string
        text:
          title: Text
          type: string
        metadata:
          "$ref": "#/components/schemas/DocumentChunkMetadata"
        embedding:
          title: Embedding
          type: array
          items:
            type: number
        score:
          title: Score
          type: number
    DocumentMetadata:
      title: DocumentMetadata
      type: object
      properties:
        source:
          "$ref": "#/components/schemas/Source"
        source_id:
          title: Source Id
          type: string
        url:
          title: Url
          type: string
        created_at:
          title: Created At
          type: string
        author:
          title: Author
          type: string
    DocumentMetadataFilter:
      title: DocumentMetadataFilter
      type: object
      properties:
        document_id:
          title: Document Id
          type: string
        source:
          "$ref": "#/components/schemas/Source"
        source_id:
          title: Source Id
          type: string
        author:
          title: Author
          type: string
        start_date:
          title: Start Date
          type: string
        end_date:
          title: End Date
          type: string
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            "$ref": "#/components/schemas/ValidationError"
    Query:
      title: Query
      required:
        - query
      type: object
      properties:
        query:
          title: Query
          type: string
        filter:
          "$ref": "#/components/schemas/DocumentMetadataFilter"
        top_k:
          title: Top K
          type: integer
          default: 3
    QueryRequest:
      title: QueryRequest
      required:
        - queries
      type: object
      properties:
        queries:
          title: Queries
          type: array
          items:
            "$ref": "#/components/schemas/Query"
    QueryResponse:
      title: QueryResponse
      required:
        - results
      type: object
      properties:
        results:
          title: Results
          type: array
          items:
            "$ref": "#/components/schemas/QueryResult"
    QueryResult:
      title: QueryResult
      required:
        - query
        - results
      type: object
      properties:
        query:
          title: Query
          type: string
        results:
          title: Results
          type: array
          items:
            "$ref": "#/components/schemas/DocumentChunkWithScore"
    Source:
      title: Source
      enum:
        - EMAIL
        - FILE
        - CHAT
      type: string
      description: An enumeration.
    UpsertRequest:
      title: UpsertRequest
      required:
        - documents
      type: object
      properties:
        documents:
          title: Documents
          type: array
          items:
            "$ref": "#/components/schemas/Document"
    UpsertResponse:
      title: UpsertResponse
      required:
        - ids
      type: object
      properties:
        ids:
          title: Ids
          type: array
          items:
            type: string
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string